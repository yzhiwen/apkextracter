from .smaliopcode import *

class OpcodeFactory:

    """generate by smaliopcode.sh"""
    opcodes = {
        "nop": Opcode("nop", Format10x()),
        "move": Opcode("move", Format12x()),
        "move/from16": Opcode("move/from16", Format22x()),
        "move/16": Opcode("move/16", Format32x()),
        "move-wide": Opcode("move-wide", Format12x()),
        "move-wide/from16": Opcode("move-wide/from16", Format22x()),
        "move-wide/16": Opcode("move-wide/16", Format32x()),
        "move-object": Opcode("move-object", Format12x()),
        "move-object/from16": Opcode("move-object/from16", Format22x()),
        "move-object/16": Opcode("move-object/16", Format32x()),
        "move-result": Opcode("move-result", Format11x()),
        "move-result-wide": Opcode("move-result-wide", Format11x()),
        "move-result-object": Opcode("move-result-object", Format11x()),
        "move-exception": Opcode("move-exception", Format11x()),
        "return-void": Opcode("return-void", Format10x()),
        "return": Opcode("return", Format11x()),
        "return-wide": Opcode("return-wide", Format11x()),
        "return-object": Opcode("return-object", Format11x()),
        "const/4": Opcode("const/4", Format11n()),
        "const/16": Opcode("const/16", Format21s()),
        "const": Opcode("const", Format31i()),
        "const/high16": Opcode("const/high16", Format21h()),
        "const-wide/16": Opcode("const-wide/16", Format21s()),
        "const-wide/32": Opcode("const-wide/32", Format31i()),
        "const-wide": Opcode("const-wide", Format51l()),
        "const-wide/high16": Opcode("const-wide/high16", Format21h()),
        "const-string": Opcode("const-string", Format21c()),
        "const-string/jumbo": Opcode("const-string/jumbo", Format31c()),
        "const-class": Opcode("const-class", Format21c()),
        "monitor-enter": Opcode("monitor-enter", Format11x()),
        "monitor-exit": Opcode("monitor-exit", Format11x()),
        "check-cast": Opcode("check-cast", Format21c()),
        "instance-of": Opcode("instance-of", Format22c()),
        "array-length": Opcode("array-length", Format12x()),
        "new-instance": Opcode("new-instance", Format21c()),
        "new-array": Opcode("new-array", Format22c()),
        "filled-new-array": Opcode("filled-new-array", Format35c()),
        "filled-new-array/range": Opcode("filled-new-array/range", Format3rc()),
        "fill-array-data": Opcode("fill-array-data", Format31t()),
        "throw": Opcode("throw", Format11x()),
        "goto": Opcode("goto", Format10t()),
        "goto/16": Opcode("goto/16", Format20t()),
        "goto/32": Opcode("goto/32", Format30t()),
        "packed-switch": Opcode("packed-switch", Format31t()),
        "sparse-switch": Opcode("sparse-switch", Format31t()),
        "cmpl-float": Opcode("cmpl-float", Format23x()),
        "cmpg-float": Opcode("cmpg-float", Format23x()),
        "cmpl-double": Opcode("cmpl-double", Format23x()),
        "cmpg-double": Opcode("cmpg-double", Format23x()),
        "cmp-long": Opcode("cmp-long", Format23x()),
        "if-eq": Opcode("if-eq", Format22t()),
        "if-ne": Opcode("if-ne", Format22t()),
        "if-lt": Opcode("if-lt", Format22t()),
        "if-ge": Opcode("if-ge", Format22t()),
        "if-gt": Opcode("if-gt", Format22t()),
        "if-le": Opcode("if-le", Format22t()),
        "if-eqz": Opcode("if-eqz", Format21t()),
        "if-nez": Opcode("if-nez", Format21t()),
        "if-ltz": Opcode("if-ltz", Format21t()),
        "if-gez": Opcode("if-gez", Format21t()),
        "if-gtz": Opcode("if-gtz", Format21t()),
        "if-lez": Opcode("if-lez", Format21t()),
        "aget": Opcode("aget", Format23x()),
        "aget-wide": Opcode("aget-wide", Format23x()),
        "aget-object": Opcode("aget-object", Format23x()),
        "aget-boolean": Opcode("aget-boolean", Format23x()),
        "aget-byte": Opcode("aget-byte", Format23x()),
        "aget-char": Opcode("aget-char", Format23x()),
        "aget-short": Opcode("aget-short", Format23x()),
        "aput": Opcode("aput", Format23x()),
        "aput-wide": Opcode("aput-wide", Format23x()),
        "aput-object": Opcode("aput-object", Format23x()),
        "aput-boolean": Opcode("aput-boolean", Format23x()),
        "aput-byte": Opcode("aput-byte", Format23x()),
        "aput-char": Opcode("aput-char", Format23x()),
        "aput-short": Opcode("aput-short", Format23x()),
        "iget": Opcode("iget", Format22c()),
        "iget-wide": Opcode("iget-wide", Format22c()),
        "iget-object": Opcode("iget-object", Format22c()),
        "iget-boolean": Opcode("iget-boolean", Format22c()),
        "iget-byte": Opcode("iget-byte", Format22c()),
        "iget-char": Opcode("iget-char", Format22c()),
        "iget-short": Opcode("iget-short", Format22c()),
        "iput": Opcode("iput", Format22c()),
        "iput-wide": Opcode("iput-wide", Format22c()),
        "iput-object": Opcode("iput-object", Format22c()),
        "iput-boolean": Opcode("iput-boolean", Format22c()),
        "iput-byte": Opcode("iput-byte", Format22c()),
        "iput-char": Opcode("iput-char", Format22c()),
        "iput-short": Opcode("iput-short", Format22c()),
        "sget": Opcode("sget", Format21c()),
        "sget-wide": Opcode("sget-wide", Format21c()),
        "sget-object": Opcode("sget-object", Format21c()),
        "sget-boolean": Opcode("sget-boolean", Format21c()),
        "sget-byte": Opcode("sget-byte", Format21c()),
        "sget-char": Opcode("sget-char", Format21c()),
        "sget-short": Opcode("sget-short", Format21c()),
        "sput": Opcode("sput", Format21c()),
        "sput-wide": Opcode("sput-wide", Format21c()),
        "sput-object": Opcode("sput-object", Format21c()),
        "sput-boolean": Opcode("sput-boolean", Format21c()),
        "sput-byte": Opcode("sput-byte", Format21c()),
        "sput-char": Opcode("sput-char", Format21c()),
        "sput-short": Opcode("sput-short", Format21c()),
        "invoke-virtual": Opcode("invoke-virtual", Format35c()),
        "invoke-super": Opcode("invoke-super", Format35c()),
        "invoke-direct": Opcode("invoke-direct", Format35c()),
        "invoke-static": Opcode("invoke-static", Format35c()),
        "invoke-interface": Opcode("invoke-interface", Format35c()),
        "invoke-virtual/range": Opcode("invoke-virtual/range", Format3rc()),
        "invoke-super/range": Opcode("invoke-super/range", Format3rc()),
        "invoke-direct/range": Opcode("invoke-direct/range", Format3rc()),
        "invoke-static/range": Opcode("invoke-static/range", Format3rc()),
        "invoke-interface/range": Opcode("invoke-interface/range", Format3rc()),
        "neg-int": Opcode("neg-int", Format12x()),
        "not-int": Opcode("not-int", Format12x()),
        "neg-long": Opcode("neg-long", Format12x()),
        "not-long": Opcode("not-long", Format12x()),
        "neg-float": Opcode("neg-float", Format12x()),
        "neg-double": Opcode("neg-double", Format12x()),
        "int-to-long": Opcode("int-to-long", Format12x()),
        "int-to-float": Opcode("int-to-float", Format12x()),
        "int-to-double": Opcode("int-to-double", Format12x()),
        "long-to-int": Opcode("long-to-int", Format12x()),
        "long-to-float": Opcode("long-to-float", Format12x()),
        "long-to-double": Opcode("long-to-double", Format12x()),
        "float-to-int": Opcode("float-to-int", Format12x()),
        "float-to-long": Opcode("float-to-long", Format12x()),
        "float-to-double": Opcode("float-to-double", Format12x()),
        "double-to-int": Opcode("double-to-int", Format12x()),
        "double-to-long": Opcode("double-to-long", Format12x()),
        "double-to-float": Opcode("double-to-float", Format12x()),
        "int-to-byte": Opcode("int-to-byte", Format12x()),
        "int-to-char": Opcode("int-to-char", Format12x()),
        "int-to-short": Opcode("int-to-short", Format12x()),
        "add-int": Opcode("add-int", Format23x()),
        "sub-int": Opcode("sub-int", Format23x()),
        "mul-int": Opcode("mul-int", Format23x()),
        "div-int": Opcode("div-int", Format23x()),
        "rem-int": Opcode("rem-int", Format23x()),
        "and-int": Opcode("and-int", Format23x()),
        "or-int": Opcode("or-int", Format23x()),
        "xor-int": Opcode("xor-int", Format23x()),
        "shl-int": Opcode("shl-int", Format23x()),
        "shr-int": Opcode("shr-int", Format23x()),
        "ushr-int": Opcode("ushr-int", Format23x()),
        "add-long": Opcode("add-long", Format23x()),
        "sub-long": Opcode("sub-long", Format23x()),
        "mul-long": Opcode("mul-long", Format23x()),
        "div-long": Opcode("div-long", Format23x()),
        "rem-long": Opcode("rem-long", Format23x()),
        "and-long": Opcode("and-long", Format23x()),
        "or-long": Opcode("or-long", Format23x()),
        "xor-long": Opcode("xor-long", Format23x()),
        "shl-long": Opcode("shl-long", Format23x()),
        "shr-long": Opcode("shr-long", Format23x()),
        "ushr-long": Opcode("ushr-long", Format23x()),
        "add-float": Opcode("add-float", Format23x()),
        "sub-float": Opcode("sub-float", Format23x()),
        "mul-float": Opcode("mul-float", Format23x()),
        "div-float": Opcode("div-float", Format23x()),
        "rem-float": Opcode("rem-float", Format23x()),
        "add-double": Opcode("add-double", Format23x()),
        "sub-double": Opcode("sub-double", Format23x()),
        "mul-double": Opcode("mul-double", Format23x()),
        "div-double": Opcode("div-double", Format23x()),
        "rem-double": Opcode("rem-double", Format23x()),
        "add-int/2addr": Opcode("add-int/2addr", Format12x()),
        "sub-int/2addr": Opcode("sub-int/2addr", Format12x()),
        "mul-int/2addr": Opcode("mul-int/2addr", Format12x()),
        "div-int/2addr": Opcode("div-int/2addr", Format12x()),
        "rem-int/2addr": Opcode("rem-int/2addr", Format12x()),
        "and-int/2addr": Opcode("and-int/2addr", Format12x()),
        "or-int/2addr": Opcode("or-int/2addr", Format12x()),
        "xor-int/2addr": Opcode("xor-int/2addr", Format12x()),
        "shl-int/2addr": Opcode("shl-int/2addr", Format12x()),
        "shr-int/2addr": Opcode("shr-int/2addr", Format12x()),
        "ushr-int/2addr": Opcode("ushr-int/2addr", Format12x()),
        "add-long/2addr": Opcode("add-long/2addr", Format12x()),
        "sub-long/2addr": Opcode("sub-long/2addr", Format12x()),
        "mul-long/2addr": Opcode("mul-long/2addr", Format12x()),
        "div-long/2addr": Opcode("div-long/2addr", Format12x()),
        "rem-long/2addr": Opcode("rem-long/2addr", Format12x()),
        "and-long/2addr": Opcode("and-long/2addr", Format12x()),
        "or-long/2addr": Opcode("or-long/2addr", Format12x()),
        "xor-long/2addr": Opcode("xor-long/2addr", Format12x()),
        "shl-long/2addr": Opcode("shl-long/2addr", Format12x()),
        "shr-long/2addr": Opcode("shr-long/2addr", Format12x()),
        "ushr-long/2addr": Opcode("ushr-long/2addr", Format12x()),
        "add-float/2addr": Opcode("add-float/2addr", Format12x()),
        "sub-float/2addr": Opcode("sub-float/2addr", Format12x()),
        "mul-float/2addr": Opcode("mul-float/2addr", Format12x()),
        "div-float/2addr": Opcode("div-float/2addr", Format12x()),
        "rem-float/2addr": Opcode("rem-float/2addr", Format12x()),
        "add-double/2addr": Opcode("add-double/2addr", Format12x()),
        "sub-double/2addr": Opcode("sub-double/2addr", Format12x()),
        "mul-double/2addr": Opcode("mul-double/2addr", Format12x()),
        "div-double/2addr": Opcode("div-double/2addr", Format12x()),
        "rem-double/2addr": Opcode("rem-double/2addr", Format12x()),
        "add-int/lit16": Opcode("add-int/lit16", Format22s()),
        "rsub-int": Opcode("rsub-int", Format22s()),
        "mul-int/lit16": Opcode("mul-int/lit16", Format22s()),
        "div-int/lit16": Opcode("div-int/lit16", Format22s()),
        "rem-int/lit16": Opcode("rem-int/lit16", Format22s()),
        "and-int/lit16": Opcode("and-int/lit16", Format22s()),
        "or-int/lit16": Opcode("or-int/lit16", Format22s()),
        "xor-int/lit16": Opcode("xor-int/lit16", Format22s()),
        "add-int/lit8": Opcode("add-int/lit8", Format22b()),
        "rsub-int/lit8": Opcode("rsub-int/lit8", Format22b()),
        "mul-int/lit8": Opcode("mul-int/lit8", Format22b()),
        "div-int/lit8": Opcode("div-int/lit8", Format22b()),
        "rem-int/lit8": Opcode("rem-int/lit8", Format22b()),
        "and-int/lit8": Opcode("and-int/lit8", Format22b()),
        "or-int/lit8": Opcode("or-int/lit8", Format22b()),
        "xor-int/lit8": Opcode("xor-int/lit8", Format22b()),
        "shl-int/lit8": Opcode("shl-int/lit8", Format22b()),
        "shr-int/lit8": Opcode("shr-int/lit8", Format22b()),
        "ushr-int/lit8": Opcode("ushr-int/lit8", Format22b()),
        "iget-volatile": Opcode("iget-volatile", Format22c()),
        "iput-volatile": Opcode("iput-volatile", Format22c()),
        "sget-volatile": Opcode("sget-volatile", Format21c()),
        "sput-volatile": Opcode("sput-volatile", Format21c()),
        "iget-object-volatile": Opcode("iget-object-volatile", Format22c()),
        "iget-wide-volatile": Opcode("iget-wide-volatile", Format22c()),
        "iput-wide-volatile": Opcode("iput-wide-volatile", Format22c()),
        "sget-wide-volatile": Opcode("sget-wide-volatile", Format21c()),
        "sput-wide-volatile": Opcode("sput-wide-volatile", Format21c()),
        "throw-verification-error": Opcode("throw-verification-error", Format20bc()),
        "execute-inline": Opcode("execute-inline", Format35mi()),
        "execute-inline/range": Opcode("execute-inline/range", Format3rmi()),
        "invoke-direct-empty": Opcode("invoke-direct-empty", Format35c()),
        "invoke-object-init/range": Opcode("invoke-object-init/range", Format3rc()),
        "return-void-barrier": Opcode("return-void-barrier", Format10x()),
        "return-void-no-barrier": Opcode("return-void-no-barrier", Format10x()),
        "iget-quick": Opcode("iget-quick", Format22cs()),
        "iget-wide-quick": Opcode("iget-wide-quick", Format22cs()),
        "iget-object-quick": Opcode("iget-object-quick", Format22cs()),
        "iput-quick": Opcode("iput-quick", Format22cs()),
        "iput-wide-quick": Opcode("iput-wide-quick", Format22cs()),
        "iput-object-quick": Opcode("iput-object-quick", Format22cs()),
        "iput-boolean-quick": Opcode("iput-boolean-quick", Format22cs()),
        "iput-byte-quick": Opcode("iput-byte-quick", Format22cs()),
        "iput-char-quick": Opcode("iput-char-quick", Format22cs()),
        "iput-short-quick": Opcode("iput-short-quick", Format22cs()),
        "iget-boolean-quick": Opcode("iget-boolean-quick", Format22cs()),
        "iget-byte-quick": Opcode("iget-byte-quick", Format22cs()),
        "iget-char-quick": Opcode("iget-char-quick", Format22cs()),
        "iget-short-quick": Opcode("iget-short-quick", Format22cs()),
        "invoke-virtual-quick": Opcode("invoke-virtual-quick", Format35ms()),
        "invoke-virtual-quick/range": Opcode("invoke-virtual-quick/range", Format3rms()),
        "invoke-super-quick": Opcode("invoke-super-quick", Format35ms()),
        "invoke-super-quick/range": Opcode("invoke-super-quick/range", Format3rms()),
        "iput-object-volatile": Opcode("iput-object-volatile", Format22c()),
        "sget-object-volatile": Opcode("sget-object-volatile", Format21c()),
        "sput-object-volatile": Opcode("sput-object-volatile", Format21c()),
        # "packed-switch-payload": Opcode("packed-switch-payload", PackedSwitchPayload()),
        # "sparse-switch-payload": Opcode("sparse-switch-payload", SparseSwitchPayload()),
        # "array-payload": Opcode("array-payload", ArrayPayload()),
        "invoke-polymorphic": Opcode("invoke-polymorphic", Format45cc()),
        "invoke-polymorphic/range": Opcode("invoke-polymorphic/range", Format4rcc()),
        "invoke-custom": Opcode("invoke-custom", Format35c()),
        "invoke-custom/range": Opcode("invoke-custom/range", Format3rc()),
        "const-method-handle": Opcode("const-method-handle", Format21c()),
        "const-method-type": Opcode("const-method-type", Format21c()),
    }

    @staticmethod
    def get(name):
        opcodes = OpcodeFactory.opcodes
        if name in opcodes:
            return OpcodeFactory.opcodes[name]
    
    @staticmethod
    def tokens(instruction):
        i = instruction.find(" ")
        if i == -1: return None

        op = instruction[0: i]
        opcode = OpcodeFactory.get(op)
        if opcode is None: return None
        return opcode.format.tokens(instruction)